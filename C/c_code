#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <math.h>


int calculateHash(const char* str, int start, int end) {
    int hashValue = 0;
    int prime = 101;
    int i;
    for (i = start; i <= end; ++i) {
        hashValue = (hashValue * 256 + str[i]) % prime;
    }
    return hashValue;
}

void searchRabinKarp(const char* text, const char* pattern) {
    int textLength = strlen(text);
    int patternLength = strlen(pattern);
    int prime = 101; 
    int i, j;
    
    int patternHash = calculateHash(pattern, 0, patternLength - 1);
    int textHash = calculateHash(text, 0, patternLength - 1);

    for (i = 0; i <= textLength - patternLength; ++i) {
        
        if (patternHash == textHash) {
            int match = 1;
            for (j = 0; j < patternLength; ++j) {
                if (text[i + j] != pattern[j]) {
                    match = 0;
                    break;
                }
            }
            if (match == 1) {
                printf("Pattern found at index %d\n", i);
            }
        }
        
        
        if (i < textLength - patternLength) {
            
            textHash = (textHash - text[i] * (int)pow(256, patternLength - 1)) % prime;
            if (textHash < 0) {
                textHash += prime;
            }
            
            textHash = (textHash * 256 + text[i + patternLength]) % prime;
            if (textHash < 0) {
                textHash += prime;
            }
        }
    }
}

int main() {
    char filename[100];
    printf("Enter the name of the file: ");
    scanf("%s", filename);
    
    int file_descriptor = open(filename, O_RDONLY);
    if (file_descriptor == -1) {
        fprintf(stderr, "Error: Unable to open file.\n");
        return 1;
    }
    
    char buffer[1000]; 
    ssize_t bytes_read;
    while ((bytes_read = read(file_descriptor, buffer, sizeof(buffer))) > 0) {
        
        char *line = buffer;
        char *next_line;
        while ((next_line = strchr(line, '\n')) != NULL) {
            *next_line = '\0';
            char text[500], pattern[500];
            if (sscanf(line, "%[^,],%[^,]", text, pattern) == 2) {
                printf("Text: %s\n", text);
                printf("Pattern: %s\n", pattern);
                printf("Indices where pattern is found:\n");
                searchRabinKarp(text, pattern);
            } else {
                fprintf(stderr, "Error: Invalid format in input CSV file.\n");
            }
            
            line = next_line + 1;
        }
    }
    
    if (bytes_read == -1) {
        fprintf(stderr, "Error: Failed to read from file.\n");
        close(file_descriptor);
        return 1;
    }
    
    
    close(file_descriptor);
    
    return 0;
}
